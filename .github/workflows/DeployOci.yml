name: DeployOci

# OCI 배포를 위한 Workflow
# Deploy Workflow는 다른 Workflow 에서 호출한다
# Deploy Workflow 호출 시 secrets 값과 inputs 값을 넘겨주어야 한다.

on:
  workflow_call:
    secrets:
      OCI_ICN_NAMESPACE:
        required: true
      OCI_ICN_REGISTRY_USERNAME:
        required: true
      OCI_ICN_REGISTRY_PASSWORD:
        required: true
      OCI_ICN_CONFIG:
        required: true
      OCI_ICN_PASSPHRASE:
        required: true
      OCI_SJC_NAMESPACE:
        required: false
      OCI_SJC_REGISTRY_USERNAME:
        required: false
      OCI_SJC_REGISTRY_PASSWORD:
        required: false
      OCI_SJC_CONFIG:
        required: false
      OCI_SJC_PASSPHRASE:
        required: false
      OCI_ICN_OKE_OCID_DEV:
        required: false
      OCI_ICN_OKE_OCID_STG:
        required: true
      OCI_ICN_OKE_OCID_PROD:
        required: false
      OCI_SJC_OKE_OCID_DEV:
        required: false
      OCI_SJC_OKE_OCID_STG:
        required: false
      OCI_SJC_OKE_OCID_PROD:
        required: false
    inputs:
      repository:
        type: string
        required: true
      ref_name:
        type: string
        required: true
      commit:
        type: string
        required: true
      oci_registry:
        type: string
        required: true
      oci_repository:
        type: string
        required: true
      npm_token:
        type: string
        required: true
      environment:
        type: string
        required: true
      oci_region:
        type: string
        required: true
      oci_region_key:
        type: string
        required: true
      deployment:
        type: string
        required: true
      server_code:
        type: string
        required: true
      platform:
        type: string
        required: false
      version:
        type: string
        required: false

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Print information
        run: |
          echo repository = ${{ inputs.repository }}
          echo ref_name = ${{ inputs.ref_name }}
          echo oci_registry = ${{ inputs.oci_registry }}
          echo oci_repository = ${{ inputs.oci_repository }}
          echo npm_token = ${{ inputs.npm_token }}
          echo environment = ${{ inputs.environment }}
          echo oci_region = ${{ inputs.oci_region }}
          echo oci_region_key = ${{ inputs.oci_region_key }}
          echo deployment = ${{ inputs.deployment }}
          echo server_code = ${{ inputs.server_code }}
          echo platform = ${{ inputs.platform }}
          echo version = ${{ inputs.version }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ inputs.ref_name }}

      - name: SetValue
        run: |
          mkdir -p ~/.oci
          if '${{ inputs.region == 'ap-seoul-1' }}'
          then
            echo "OCI_NAMESPACE=${{ secrets.OCI_ICN_NAMESPACE }}" >> $GITHUB_ENV
            echo "OCI_REGISTRY_USERNAME=${{ secrets.OCI_ICN_REGISTRY_USERNAME }}" >> $GITHUB_ENV
            echo "OCI_REGISTRY_PASSWORD=${{ secrets.OCI_ICN_REGISTRY_PASSWORD }}" >> $GITHUB_ENV
            echo "${{ secrets.OCI_ICN_CONFIG }}" >> ~/.oci/config
            echo "${{ secrets.OCI_ICN_PASSPHRASE }}" >> ~/.oci/key.pem
            if '${{ inputs.environment == 'DEV'}}'
            then
              echo "OCI_OKE_OCID=${{ secrets.OCI_ICN_OKE_OCID_DEV }}" >> $GITHUB_ENV
            elif '${{ inputs.environment == 'STG'}}'
            then
              echo "OCI_OKE_OCID=${{ secrets.OCI_ICN_OKE_OCID_STG }}" >> $GITHUB_ENV
            elif '${{ inputs.environment == 'PROD'}}'
            then
              echo "OCI_OKE_OCID=${{ secrets.OCI_ICN_OKE_OCID_PROD }}" >> $GITHUB_ENV
            else
              echo "Invalid environment ${{ inputs.environment }}"
              exit 1
            fi
          elif '${{ inputs.region == 'us-sanjose-1' }}'
          then
            echo "OCI_NAMESPACE=${{ secrets.OCI_SJC_NAMESPACE }}" >> $GITHUB_ENV
            echo "OCI_REGISTRY_USERNAME=${{ secrets.OCI_SJC_REGISTRY_USERNAME }}" >> $GITHUB_ENV
            echo "OCI_REGISTRY_PASSWORD=${{ secrets.OCI_SJC_REGISTRY_PASSWORD }}" >> $GITHUB_ENV
            echo "${{ secrets.OCI_SJC_CONFIG }}" >> ~/.oci/config
            echo "${{ secrets.OCI_SJC_PASSPHRASE }}" >> ~/.oci/key.pem
            if '${{ inputs.environment == 'DEV'}}'
            then
              echo "OCI_OKE_OCID=${{ secrets.OCI_SJC_OKE_OCID_DEV }}" >> $GITHUB_ENV
            elif '${{ inputs.environment == 'STG'}}'
            then
              echo "OCI_OKE_OCID=${{ secrets.OCI_SJC_OKE_OCID_STG }}" >> $GITHUB_ENV
            elif '${{ inputs.environment == 'PROD'}}'
            then
              echo "OCI_OKE_OCID=${{ secrets.OCI_SJC_OKE_OCID_PROD }}" >> $GITHUB_ENV
            else
              echo "Invalid environment ${{ inputs.environment }}"
              exit 1
            fi
          else
            echo "Invalid region ${{ inputs.region }}"
            exit 1
          fi

      - name: Login to OCI Registry
        uses: docker/login-action@v1
        with:
          username: ${{ env.OCI_REGISTRY_USERNAME }}
          password: ${{ env.OCI_REGISTRY_PASSWORD }}
          registry: ${{ inputs.oci_registry }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push to OCI Registry
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ inputs.oci_registry }}/${{ env.OCI_NAMESPACE }}/${{ inputs.oci_repository }}:latest
          build-args: |
            NPM_TOKEN=${{ github.token }}
            ENVIRONMENT=${{ inputs.environment }}
            VERSION=${{ inputs.version }}
            env=${{ inputs.environment }}
            platform=${{ inputs.platform }}
            SHORT_REGION=${{ inputs.oci_region_key }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: "Install OCI CLI"
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --oci-cli-version 3.51.5 --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL

      - name: "Fix Config File Permissions"
        run: |
          oci setup repair-file-permissions --file ~/.oci/config
          oci setup repair-file-permissions --file ~/.oci/key.pem

      - name: "Download the KUBECONFIG"
        run: |
          mkdir -p ~/.kube
          oci ce cluster create-kubeconfig --cluster-id ${{ env.OCI_OKE_OCID }} --file ~/.kube/config --region ${{ inputs.oci_region }} --token-version 2.0.0 
          export KUBECONFIG=~/.kube/config

      - name: Debug file structure
        run: |
          pwd
          ls -R

      - name: "Deploy the API on OKE"
        run: |
          set -e  # 에러 발생 시 즉시 종료

          export IMAGE_TAG=${{ inputs.commit }}

          echo "Applying Deployment..."
          kubectl apply -f ./${{ inputs.deployment }}

          echo "Restarting Deployment..."
          kubectl rollout restart deployment/${{ inputs.server_code }}

          echo "Waiting for Deployment to be ready..."
          kubectl rollout status deployment/${{ inputs.server_code }} --timeout=120s

          echo "Waiting for all pods in deployment to be ready..."
          kubectl wait --for=condition=Ready pod -l app=${{ inputs.server_code }} --timeout=120s

          echo "Checking Pod readiness status..."
          READY_STATUS=$(kubectl get pod -l app=${{ inputs.server_code }} -o jsonpath="{.items[*].status.conditions[?(@.type=='Ready')].status}")
          if [ "$READY_STATUS" != "True" ]; then
            echo "Readiness Probe failed!"
            exit 1
          fi
          echo "Readiness Probe passed!"

          echo "Deployment successful!"
