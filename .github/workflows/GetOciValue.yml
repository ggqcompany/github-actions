name: GetOciValue

# OCI 배포를 위해 필요한 값을 구하는 Workflow
# 개발자는 아래 env 값을 확인하고 필요 시 수정해주어야 한다.
# Backend OCI Naming Convention 을 참고하여 input 값을 넘겨주어야 한다.
# link:

on:
  workflow_call:
    secrets:
      OCI_ICN_NAMESPACE:
        required: true
      OCI_ICN_REGISTRY_USERNAME:
        required: true
      OCI_ICN_REGISTRY_PASSWORD:
        required: true
      OCI_ICN_CONFIG:
        required: true
      OCI_ICN_PASSPHRASE:
        required: true
      OCI_SJC_NAMESPACE:
        required: false
      OCI_SJC_REGISTRY_USERNAME:
        required: false
      OCI_SJC_REGISTRY_PASSWORD:
        required: false
      OCI_SJC_CONFIG:
        required: false
      OCI_SJC_PASSPHRASE:
        required: false
      OCI_ICN_OKE_OCID_DEV:
        required: false
      OCI_ICN_OKE_OCID_STG:
        required: true
      OCI_ICN_OKE_OCID_PROD:
        required: false
      OCI_SJC_OKE_OCID_DEV:
        required: false
      OCI_SJC_OKE_OCID_STG:
        required: false
      OCI_SJC_OKE_OCID_PROD:
        required: false
    inputs:
      region:
        type: string
        required: true
      environment:
        type: string
        required: true
      server_code:
        type: string
        required: true
    outputs:
      oci_registry:
        value: ${{ jobs.GetOciValue.outputs.oci_registry }}
      oci_repository:
        value: ${{ jobs.GetOciValue.outputs.oci_repository }}
      oci_region_key:
        value: ${{ jobs.GetOciValue.outputs.oci_region_key }}
      deployment:
        value: ${{ jobs.GetOciValue.outputs.deployment }}

jobs:
  GetOciValue:
    runs-on: ubuntu-latest
    outputs:
      oci_registry: ${{ env.OCI_REGISTRY }}
      oci_repository: ${{ env.OCI_REPOSITORY }}
      oci_region_key: ${{ env.OCI_REGION_KEY }}
      deployment: ${{ env.DEPLOYMENT }}

    steps:
      # region 추가시 변경 필요
      # (ex) ap-seoul-1 -> icn
      - name: Get Oci Region Key & Secret
        run: |
          if '${{ inputs.region == 'ap-seoul-1' }}'
          then
            echo "OCI_REGION_KEY=icn" >> $GITHUB_ENV
          elif '${{ inputs.region == 'us-sanjose-1' }}'
          then
            echo "OCI_REGION_KEY=sjc" >> $GITHUB_ENV
          else
            echo "Invalid region ${{ inputs.region }}"
            exit 1
          fi

      # Extract 'DEV', 'STG', 'PROD' -> 'd', 's', 'p'
      - name: Extract short environment name like 'd', 's', 'p'
        run: |
          echo "SHORT_ENVIRONMENT=$(echo "${{ inputs.environment }}" | tr '[A-Z]' '[a-z]' | sed -rn 's/([^[[:digit:]])[^[[:digit:]]*/\1/p')" >> $GITHUB_ENV

      # Make repository name (ex) ocr-[icn]-[d]-ggq-[lol-desktop]
      - name: Make repository name
        run: |
          echo "OCI_REPOSITORY=ocr-${{ env.OCI_REGION_KEY }}-${{ env.SHORT_ENVIRONMENT }}-ggq-${{ inputs.server_code }}" >> $GITHUB_ENV

      # Make deployment name (ex) deployment-[dev]-[icn].yaml
      - name: Make deployment name
        run: |
          echo ${{ inputs.environment }} | tr '[A-Z]' '[a-z]'
          echo "DEPLOYMENT=deployment-$(echo ${{ inputs.environment }} | tr '[A-Z]' '[a-z]')-${{ env.OCI_REGION_KEY }}.yaml" >> $GITHUB_ENV

      # Make registry name
      # (ex) [icn].ocir.io
      - name: Make registry name
        run: |
          echo "OCI_REGISTRY=${{ env.OCI_REGION_KEY }}.ocir.io" >> $GITHUB_ENV

      - name: Print information
        run: |
          echo "OCI_REGISTRY = '${{ env.OCI_REGISTRY }}'"
          echo "OCI_REPOSITORY = '${{ env.OCI_REPOSITORY }}'"
          echo "OCI_REGION_KEY = '${{ env.OCI_REGION_KEY }}'"
          echo "DEPLOYMENT = '${{ env.DEPLOYMENT }}'"
